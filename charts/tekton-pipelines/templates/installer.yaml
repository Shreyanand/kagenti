apiVersion: v1
kind: ServiceAccount
metadata:
  name: {{ .Values.installer.serviceAccount.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: tekton-installer
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: installer
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: {{ .Release.Name }}-tekton-installer
  labels:
    app.kubernetes.io/name: tekton-installer
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: installer
rules:
- apiGroups: ["*"]
  resources: ["*"]
  verbs: ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: {{ .Release.Name }}-tekton-installer
  labels:
    app.kubernetes.io/name: tekton-installer
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: installer
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: {{ .Release.Name }}-tekton-installer
subjects:
- kind: ServiceAccount
  name: {{ .Values.installer.serviceAccount.name }}
  namespace: {{ .Release.Namespace }}
---
apiVersion: batch/v1
kind: Job
metadata:
  name: {{ .Values.installer.job.name }}
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/name: tekton-installer
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/component: installer
  annotations:
    "helm.sh/hook": post-install,post-upgrade
    "helm.sh/hook-weight": "1"
    "helm.sh/hook-delete-policy": before-hook-creation,hook-succeeded
spec:
  template:
    metadata:
      labels:
        app.kubernetes.io/name: tekton-installer
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/component: installer
    spec:
      serviceAccountName: {{ .Values.installer.serviceAccount.name }}
      restartPolicy: OnFailure
      containers:
      - name: tekton-installer
        image: {{ .Values.kubectl.image }}
        command:
        - /bin/sh
        - -c
        - |
          echo "Checking if Tekton Pipelines is already installed..."
          if kubectl get namespace {{ .Values.tekton.namespace }} 2>/dev/null; then
            echo "Tekton Pipelines namespace exists, checking if installation is complete..."
            if kubectl get deployment tekton-pipelines-controller -n {{ .Values.tekton.namespace }} 2>/dev/null; then
              echo "Tekton Pipelines already installed, skipping installation"
              exit 0
            fi
          fi
          
          echo "Installing Tekton Pipelines from {{ .Values.tekton.releaseUrl }}..."
          kubectl apply --filename {{ .Values.tekton.releaseUrl }}
          
          echo "Waiting for Tekton Pipelines to be ready..."
          kubectl wait --for=condition=Available deployment/tekton-pipelines-controller -n {{ .Values.tekton.namespace }} --timeout=300s
          kubectl wait --for=condition=Available deployment/tekton-pipelines-webhook -n {{ .Values.tekton.namespace }} --timeout=300s
          
          echo "Tekton Pipelines installation completed successfully"
